# A version of the example nginx configuration provided with Gunicorn
# (http://gunicorn.org)

upstream app {
    # for a UNIX domain socket setup
    server unix:/var/run/gunicorn/app.sock fail_timeout=0;

    # for TCP setups, point these to your backend servers
    # server 192.168.0.7:8080 fail_timeout=0;
    # server 192.168.0.8:8080 fail_timeout=0;
}

server {
    listen 80;
    # If you need SSL:
    # listen 443 default ssl;
    # ssl_certificate /etc/ssl/certs/app.com.crt;
    # ssl_certificate_key /etc/ssl/private/app.key;

    client_max_body_size 4G;
    server_name app dev.app.com app.com www.app.com;

    error_log /var/log/nginx/app-error.log;
    access_log /var/log/nginx/app-access.log combined;

    # ~2 seconds is often enough for most folks to parse HTML/CSS and
    # retrieve needed images/icons/frames, connections are cheap in
    # nginx so increasing this is generally safe...
    keepalive_timeout 5;

    # path for static files
    root /var/webapps/app/releases/current/media/;

    location /media/admin {
      alias /var/webapps/app/releases/current/env/lib/python2.6/site-packages/django/contrib/admin/media/;
      break;
    }

    location /media/ {
        alias /var/webapps/app/releases/current/media/;
        break;
    }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        proxy_read_timeout 120;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://app;
            break;
        }
    }
}
